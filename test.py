
import cx_Oracle

from config import config


conn = cx_Oracle.connect(
	user=config.username,password=config.password,dsn="localhost/XEPDB1",encoding="UTF-8"
	)

cursor = conn.cursor()

class createTables:
	def __init__(self):
		self.Members_query = """

CREATE TABLE members (
memberID INT GENERATED BY DEFAULT AS IDENTITY,
firstName varchar(50) NOT NULL,
lastName varchar(50) NOT NULL,
nationalID varchar(256) NOT NULL UNIQUE,
phoneNumber int NOT NULL UNIQUE,
emailAddress varchar(50) UNIQUE,
gender varchar(10) NOT NULL,
dateOfBirth date NULL,
dateOfRegistration date NOT NULL,
CONSTRAINT member_pk PRIMARY KEY (memberID)
)

		"""

		self.cont_query = """

CREATE TABLE contribution (
contributionID int GENERATED BY DEFAULT AS IDENTITY,
memberID int NOT NULL UNIQUE,
amount int NOT NULL,
dateOfContribution date NOT NULL,
paymentMethod varchar(50) NOT NULL,
CHECK (amount>=1000),
CONSTRAINT contributer_fk FOREIGN KEY (contributionID)
REFERENCES  members(memberID),
PRIMARY KEY (contributionID)
)





		"""
		self.benefit_query = """

CREATE TABLE benefits (
benefitID int GENERATED BY DEFAULT AS IDENTITY,
memberID int UNIQUE NOT NULL,
amountBenefited int NOT NULL,
dateOfbenefit date NOT NULL,
reasonForBenefit varchar(50) NOT NULL,
CONSTRAINT benefit_fk FOREIGN KEY (memberID)
REFERENCES members(memberID),
PRIMARY KEY (benefitID)
)


		"""

		self.dependants_query = """

CREATE TABLE dependants (
dependantID int GENERATED BY DEFAULT AS IDENTITY,
dependedMemberID int UNIQUE NOT NULL,
firstName varchar(50) NOT NULL,
lastName varchar(50) NOT NULL,
gender varchar(10) NOT NULL,
relationship varchar(50) NOT NULL,
dateOfBirth date NOT NULL,
CONSTRAINT depandant_fk FOREIGN KEY (dependedMemberID)
REFERENCES members(memberID),
PRIMARY KEY (dependantID)
)
		"""
		self.checkmembers = "Select * from"

		self.create_members()
		self.create_contribution()
		self.create_benefits()
		self.create_dependants()




	def create_members(self):
		try:
			cursor.execute(self.Members_query)

			print("Members Table Created")
			conn.commit()
		except cx_Oracle.Error as er:
			
			print(er)

	def create_contribution(self):
		try:
			cursor.execute(self.cont_query)
			print("Contributribution table created")
			conn.commit()
		except cx_Oracle.Error as er:
			print(er)

	def create_benefits(self):
		try:
			cursor.execute(self.benefit_query)
			print("Benefits Table Created")
			conn.commit()
		except cx_Oracle.Error as er:
			print(er)

	def create_dependants(self):
		try:
			cursor.execute(self.dependants_query)
			print("Dependants Table Created")
			conn.commit()
		except cx_Oracle.Error as er:
			print(er)

